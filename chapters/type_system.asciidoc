[[CH-TypeSystem]]
== The Erlang Type System and Tags

One of the most important aspects of ERTS to understand is how ERTS
stores data, that is, how Erlang terms are stored in memory. This
gives you the basis for understanding how garbage collection works,
how message passing works, and gives you an insight into how much
memory is needed.

In this chapter you will learn the basic data types of Erlang and
how they are implemented in ERTS. This knowledge will be essential
in understanding the chapter on memory allocation and garbage
collection, see xref:CH-Memory[].

=== The Erlang ((Type System))

Erlang is _((strongly typed))_. That is, there is no way to coerce one
type into another type, you can only convert from one type to another.
Compare this to e.g. C where you can coerce a `char` to an `int` or
any pointer type to a `void *`.

The Erlang type ((lattice)) is quite flat, as you can see in
xref:erlang_type_lattice[]. There are only a few real subtypes:
_numbers_ have the subtypes _integer_ and _float_, and _list_ has the
subtypes _nil_ and _cons_. (One could also argue that _tuple_ has one
subtype for each size, and similar for _maps_.)

The Erlang Type Lattice


[[erlang_type_lattice]]
.Erlang Type Lattice
[graphviz]
----

digraph G {
  overlap=false;
  splines=false;
  node[fontname=Helvetica fontsize=22];
  edge [penwidth=0.5]

  any[shape=plaintext, label="any()"];
  number[shape=plaintext, label="number()"];
  atom[shape=plaintext, label="atom()"];
  reference[shape=plaintext, label="reference()"];
  fun[shape=plaintext, label="fun()"];
  port[shape=plaintext, label="port()"];
  pid[shape=plaintext, label="pid()"];
  tuple[shape=plaintext, label="tuple()"];
  map[shape=plaintext, label="map()"];
  list[shape=plaintext, label="list()"];
  binary[shape=plaintext, label="binary()"];
  integer[shape=plaintext, label="integer()"];
  float[shape=plaintext, label="float()"];
  nil[shape=plaintext, label="nil()"];
  cons[shape=plaintext, label="cons()"];
  boolean[shape=plaintext, label="boolean()"];
  false[shape=plaintext, label="false()"];
  true[shape=plaintext, label="true()"];
  dummy0[shape=point, width=0.004];
  dummy1[shape=point, width=0.004];
  dummy2[shape=point, width=0.004];
  none[shape=plaintext, label="none()"];
  gt0[shape=plaintext, label="<" fontcolor=gray];
  gt1[shape=plaintext, label="<" fontcolor=gray];
  gt2[shape=plaintext, label="<" fontcolor=gray];
  gt3[shape=plaintext, label="<" fontcolor=gray];
  gt4[shape=plaintext, label="<" fontcolor=gray];
  gt5[shape=plaintext, label="<" fontcolor=gray];
  gt6[shape=plaintext, label="<" fontcolor=gray];
  gt7[shape=plaintext, label="<" fontcolor=gray];
  gt8[shape=plaintext, label="<" fontcolor=gray];
  gt9[shape=plaintext, label="<" fontcolor=gray];

  subgraph cluster_1 {
    style=invis
    {rank=same gt0 gt1 gt2 gt3 gt4 gt5 gt6 gt7 gt8 number, atom, reference, fun, port, pid, tuple, map, list, binary}
    number -> gt0 -> atom -> gt1 -> reference -> gt2 -> fun -> gt3 -> port -> gt4 -> pid -> gt5 -> tuple -> gt6 -> map -> gt7 -> list -> gt8 -> binary
    [color=transparent arrowhead=none labelcolor=gray];
  }

  subgraph cluster_2 {
    style=invis
    {rank=same gt9 true, false}
    dummy1 dummy2 false -> gt9 -> true
    [color=transparent arrowhead=none labelcolor=gray];
  }

  {rank=same integer, float, boolean, nil, cons, dummy0}
  any->number[dir=none];
  number->integer[dir=none];
  number->float[dir=none];
  any->atom[dir=none];
  atom->boolean[dir=none];
  any->reference[dir=none];
  any->fun[dir=none];
  any->port[dir=none];
  any->pid[dir=none];
  any->tuple[dir=none];
  any->map[dir=none];
  any->list[dir=none];
  list->nil[dir=none];
  list->cons[dir=none];
  any->binary[dir=none];
  binary->dummy0[dir=none];
  integer->dummy1[dir=none];
  dummy1->none[dir=none];
  float->dummy2[dir=none];
  dummy2->none[dir=none];
  atom->none[dir=none];
  boolean->false[dir=none];
  boolean->true[dir=none];
  boolean->none[dir=none];
  false->none[dir=none];
  true->none[dir=none];
  reference->none[dir=none];
  fun->none[dir=none];
  port->none[dir=none];
  pid->none[dir=none];
  tuple->none[dir=none];
  map->none[dir=none];
  nil->none[dir=none];
  cons->none[dir=none];
  dummy0->none[dir=none];

}

----

There is a ((partial order)) (`<`, `>`) on all terms in Erlang where the
types are ordered from left to right in the above lattice.

The order is partial and not total since integers and floats
are converted before comparison. Both `1 < 1.0` and `1.0 < 1` are
false, while `1 =< 1.0`, `1 >= 1.0`, and `1 == 1.0` are true. The number with
the lesser precision is converted to the number with higher precision.
Usually integers are converted to floats. For very large or small
floats the float is converted to an integer. This happens if all
significant digits are to the left of the decimal point.

****
Erlang has two kinds of equality comparison: The first is _((arithmetic
equality))_ `==` (or `/=` for inequality), such that if `A =< B` and also `A
>= B`, then `A == B`. The second is _((exact equality))_ `=:=` (or `=/=` for
exact inequality), where `1 =:= 1.0` is false. It is important to note that
exact equality is the kind used when ((pattern matching)): it never converts
values.
****

For compound structures like tuples and lists, the ordering extends
recursively, so that e.g. `{1, 2} < {1, 3}` but `{2, 1} > {1, 3}`. This
means that any set of Erlang terms can be sorted in order, and this
_((term order))_ is defined by the language.

When two ((maps)) are compared for order they are
compared as follows: If one map has fewer elements than the other it
is considered smaller, just as for tuples. Otherwise the keys are compared in _((key order))_,
which means all integers are considered smaller than all floats. If all the
keys are the same then each value pair (in key order) is compared
arithmetically, i.e. by first converting them to the same precision.

The same is true when comparing for equality, thus
`+#{1 => 1.0} == #{1 => 1}+` but `+#{1.0 => 1} /= #{1 => 1}+`.

Erlang is dynamically typed. That is, types will be checked at
runtime and if a type error occurs an exception is thrown. The
compiler does not check the types at compile time, unlike in a
statically typed language like C or Java where you can get a
type error during compilation.

These aspects of the Erlang type system, strongly dynamically typed
with an order on the types puts some constraints on the implementation
of the language. In order to be able to check and compare types at
runtime each Erlang term has to carry its type with it.

This is solved by _tagging_ the terms.

=== The Tagging Scheme

In the memory representation of an Erlang term a few bits are reserved
for a ((type tag)). For performance reasons the terms are divided into
_((immediates))_ and _((boxed terms))_. An immediate term can fit into a
((machine word)), that is, in a register or on a stack slot. A boxed term
consists of two parts: a ((tagged pointer)) and a number of words stored
on the process heap. The _boxes_ stored on the heap have a _header_ and
a body, unless it is a list, which is headerless.

Currently ERTS uses a staged tag scheme, the history and reasoning
behind the this scheme is explained in a technical report from the
HiPE group. (See
link:http://www.it.uu.se/research/publications/reports/2000-029/[])
The ((tagging scheme)) is implemented in
link:https://github.com/erlang/otp/blob/OTP-23.0/erts/emulator/beam/erl_term.h[erl_term.h].

The basic idea is to use the least significant bits for ((tags)). Since
most modern CPU architectures aligns(((alignment))) 32- and 64-bit words, there are at
least two bits that are "unused" for pointers. These bits can be
used as tags instead. Unfortunately those two bits are not enough
for all the types in Erlang, more bits are therefore used as needed.

==== The Primary Tag

The first two bits are called the _((primary tag))_, and are used as follows:

----
  00 Header (on heap) CP (on stack)
  01 List (cons)
  10 Boxed
  11 Immediate
----

An Immediate (tag `11`) is a self-contained word, such as a small integer.
It requires no additional words.
The Boxed(((boxed terms))) tag `10` is used for pointers to objects on the heap,
except lists.

The Header tag `00` is only used on the heap for ((header words)), which we
will explain in <<Boxed Terms>>. All objects on the heap use a whole number
of machine words, generally starting with a header word.
On the stack, `00` instead indicates a return address or _((Continuation
Pointer))_ -- this is a practical choice which means no tagging/untagging of
such pointers needs to be done, since return addresses will always be
word-aligned anyway. This is a better tradeoff than using `00` for
immediates, lists, or boxed values.

The separate List tag (`01`) is an optimization due to ((lists)) being so
heavily used. This lets each ((cons cell)) be stored without a header word
on the heap, saving 1/3 of the space otherwise needed for lists, as you
will see in <<Lists>> and <<Strings>>.

==== Immediates

The Immediate tag is further divided like this:

----
 00 11 Pid
 01 11 Port
 10 11 Immediate 2
 11 11 Small integer
----

Pids and ports are ((immediates)) and can be compared for equality
efficiently. They are of course in reality just references, a ((pid))
is a process identifier and it points to a process. The process does
not reside on the heap of any process but is handled by the PCB.
A ((port)) works in much the same way.

//  (TODO: MORE ON THIS REF!)

There are two types of integers in ERTS, ((small integers)) and
((bignums)). Small integers fit in one machine word minus four tag bits,
i.e. in 28 or 60 bits for 32 and 64 bits system respectively. Bignums
on the other hand can be as large as needed (only limited by the heap
space) and are stored on the heap, as boxed objects (see  <<Boxed Terms>>).

By having all four tag bits as ones for small integers the emulator
can make an efficient test when doing integer arithmetic to see if
both arguments are immediates. (`is_both_small(x,y)` is defined as
`+(x & y & 1111) == 1111+`).

The Immediate 2 tag is further divided like this:

----
 00 10 11 Atom
 01 10 11 Catch
 10 10 11   [UNUSED]
 11 10 11 Nil
----

Atoms are made up of an index in the _((atom table))_ and the ((atom)) tag.
Two atom immediates can be compared for equality by just comparing
their immediate representation.

In the atom table atoms are stored as C structs like this:

[source,c]
----
typedef struct atom {
    IndexSlot slot;  /* MUST BE LOCATED AT TOP OF STRUCT!!! */
    int len;         /* length of atom name */
    int ord0;        /* ordinal value of first 3 bytes + 7 bits */
    byte* name;      /* name of atom */
} Atom;
----

Thanks to the `len` and the `ord0` fields the order of two atoms can
be compared efficiently as long as they don't start with the same four
letters.

****

NOTE: If you for some reason generate atoms with a pattern like name
followed by a number and then store them in an ordered list or ordered
tree the atom comparison will be more expensive if they all have the
same first letters (e.g. `foo_1`, `foo_2`, etc.).

Not that you should ever generate atom names, since the atom table is
limited. I'm just saying, there is an evil micro optimization to be
found here.

You would of course never do this, but if you find code that generates
atom with a number followed by a postfix name, now you know what the
author of that code might have been thinking.

****

The ((Catch)) immediate is only used on the stack. It contains an indirect
pointer to the point in the code where execution should
continue after an exception. More on this in xref:CH-Calls[].

The Nil tag is used for the ((empty list)) written ((`[]`)) in Erlang,
called ((NIL)) in the C code. The rest of the word is filled with ones.

=== Lists

Lists are made up of
_((cons cells))_, which are just two consecutive words on the heap: the _((head))_ and
the _((tail))_ (or `car` and `cdr` as they are called in LISP, and also in some places in
the ERTS codebase). An empty list is an immediate, as we saw above.

A cons cell could be described by a minimal C struct for building singly
linked lists, like this:

[source,c]
----
struct cons_cell {
    Eterm *head;     /* the value */
    Eterm *tail;     /* the next element */
};
----

The `tail` element is usually either another List-tagged pointer to the next
cons cell, or the NIL immediate to mark the end of the list. These are
called _((proper lists))_. Erlang is however dynamically typed and the tail
is allowed to be any term, as in `[1|2]`. These are called _((improper
lists))_ and will be a surprise to any functions that expect a proper list
as input, when they do not find a `[]` as the last element.

=== Strings

A _((string))_ in Erlang (written `"..."`) is just a list of integers
representing Unicode code points. Thus, `"XYZ"` is syntactical sugar for
`[88,89,90]`. The Erlang interactive shell will try to detect such lists of
printable characters and show them as strings instead. For example:

[source,erlang]
----
Eshell V15.2.2 (press Ctrl+G to abort, type help(). for help)
1> [88,89,90].
"XYZ"
----

NOTE: During Erlang's earlier years, strings were expected to use only
Latin-1 (ISO 8859-1) code points. Luckily, these are simply the subset
0-255 of Unicode, so there were few compatibility problems when this range
was extended.

Since allowing the whole Unicode range as "printable characters" would make
many lists of assorted integers seem like possible strings, the shell
defaults to the Latin-1 range when detecting strings, so for example:

[source,erlang]
----
2> [128526, 128526, 128526].
[128526, 128526, 128526]
----

just shows the result as a list of numbers. However, if we start Erlang
with the option `+pc unicode`, the Erlang shell will be much more generous
with what it considers printable:

[source,shell]
----
Eshell V15.2.2 (press Ctrl+G to abort, type help(). for help)
$ erl +pc unicode
Erlang/OTP 27 [erts-15.2.2] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]

Eshell V15.2.2 (press Ctrl+G to abort, type help(). for help)
1> [128526, 128526, 128526].
"😎😎😎"
2> 
----
Just note that it depends on your console, what encoding it is set to
expect, and its available fonts, whether it will be able to actually
display those characters.

The string "hello" might then look like this in memory (xref:string_representation[]):

[[string_representation]]
.Representation of the string "hello" on a 32 bit machine.
[ditaa]
----

 hend ->     +-------- -------- -------- --------+
             |              ...                  |
             |              ...                  |
             |00000000 00000000 00000000 10000001| 128 + list tag  -----------------+
 stop ->     |                                   |                                  |
                                                                                    |
 htop ->     |                                   |                                  |
         132 |00000000 00000000 00000000 01111001| 120 + list tag  -----------------|--+
         128 |00000000 00000000 00000110 10001111| (h) 104 bsl 4 + small int tag <--+  |
         124 |00000000 00000000 00000000 01110001| 112 + list tag  --------------------|--+
         120 |00000000 00000000 00000110 01011111| (e) 101 bsl 4 + small int tag <-----+  |
         116 |00000000 00000000 00000000 01110001| 112 + list tag  -----------------------|--+
         112 |00000000 00000000 00000110 11001111| (l) 108 bsl 4 + small int tag <--------+  |
         108 |00000000 00000000 00000000 01110001| 96 + list tag  ---------------------------|--+
         104 |00000000 00000000 00000110 11001111| (l) 108 bsl 4 + small int tag <-----------+  |
         100 |11111111 11111111 11111111 11111011| NIL                                          |
          96 |00000000 00000000 00000110 11111111| (o) 111 bsl 4 + small int tag <--------------+
             |                ...                |
 heap ->     +-----------------------------------+

----

This is basically a linked list of UTF-32 encoded characters, and as you
can see it wastes quite a lot of memory -- especially on a 64-bit machine
where it will use 16 bytes per character -- compared to the same string as
a UTF-8 encoded byte sequence. Therefore, strings are best used as a
temporary "text buffer" that you can match on, traverse, and prepend to,
and when done you can convert them to UTF-8 encoded Binaries for storing,
sending or printing. (We will talk more about Binaries below.)

NOTE: When Erlang strings get serialized for sending to another node or
storing in ETS tables or on disk, this is done using the Erlang ((External
Term Format)), via ((`term_to_binary()`)). This uses a much more compact
byte encoding for strings. You should generally not need to worry about
strings in those cases -- it's the on-heap representation that you should
avoid hanging on to.

=== Boxed Terms

All other terms(((boxed terms))) on the heap start with a _((header
word))_. The header word uses a four bit subtag and the primary tag 00.
The remaining bits encode the _arity_ which says how many additional words
the boxed term uses:

----
 aaaaaaaa...aaaaaaaaaaaaaaaa tttt 00
----

The subtags are:

----
 0000 00  ARITYVAL (Tuples)
 0001 00  BINARY_AGGREGATE                |
 001s 00  BIGNUM with sign bit            |
 0100 00  REF                             |
 0101 00  FUN                             | THINGS
 0110 00  FLONUM                          |
 0111 00  EXPORT                          |
 1000 00  REFC_BINARY     |               |
 1001 00  HEAP_BINARY     | BINARIES      |
 1010 00  SUB_BINARY      |               |
 1011 00    [UNUSED]
 1100 00  EXTERNAL_PID  |                 |
 1101 00  EXTERNAL_PORT | EXTERNAL THINGS |
 1110 00  EXTERNAL_REF  |                 |
 1111 00  MAP

----

==== Tuples
Tuples(((tuples))) (known as ((`ARITYVAL`)) in the ERTS code base) are
simply stored with the header containing the tag and the number of
elements, with the tuple elements (if any) in the following words. For
example, a 5-tuple `{$h, $e, $l, $l, $o}`` will look like this in memory
(xref:tuple_representation[])

[[tuple_representation]]
.Representation of a 5-tuple on a 32 bit machine.
[ditaa]
----
 hend ->     +-------- -------- -------- --------+
             |              ...                  |
             |              ...                  |
             |00000000 00000000 00000000 10000010| 128 + boxed tag ---------------+
 stop ->     |                                   |                                |
                                                                                  |
 htop ->     |                                   |                                |
         150 |00000000 00000000 00000110 11111111| (o) 111 bsl 4 + small int tag  |
         144 |00000000 00000000 00000110 11001111| (l) 108 bsl 4 + small int tag  |
         140 |00000000 00000000 00000110 11001111| (l) 108 bsl 4 + small int tag  |
         136 |00000000 00000000 00000110 01011111| (e) 101 bsl 4 + small int tag  |
         132 |00000000 00000000 00000110 10001111| (h) 104 bsl 4 + small int tag  |
         128 |00000000 00000000 00000001 01000000| 5 bsl 6 + tuple & header tag <-+
             |                ...                |
 heap ->     +-----------------------------------+

----

Note that this means that the empty tuple `{}` is represented on the heap
by a single word with all bits 0 (arity 0, subtag `0000`, and primary tag
`00`). However, it also requires the boxed pointer to the word on the heap,
so it is not as cheap as `NIL` which is an immediate and can e.g. be kept
in a register or stored as the tail of a list without needing an additional
heap word.

==== Binaries
A _binary_ is an immutable array of bytes. Internally, there are four types
of representations of ((binaries)). The two types _heap binaries_
and _refc binaries_ contain binary data. The other two types, _sub
binaries_ and _match contexts_ (the `BINARY_AGGREGATE` tag) are smaller
references into one of the other two types.

Binaries that are 64 bytes or less can be stored directly on the
process heap as _((heap binaries))_. Larger binaries are reference
counted and the payload is stored outside of the process heap, while a
reference to the payload is stored on the process heap in an object
called a _((ProcBin))_.

NOTE: An important point with binaries is that since they simply represent
a chunk of bytes, they never refer to other objects, and the garbage
collector does not need to inspect the payload. It is therefore possible to
use a different storage strategy tailored to them; in particular, reference
counting binaries will never run into the problem of circular references.

// TODO: draw a picture of binaries and their tags.

We will talk more about binaries in xref:CH-Memory[].

==== Bignums
Integers that do not fit in a small integer (word size - 4 bits) are
stored on the heap as so-called _((bignums))_ (or _((arbitrary precision integers))_).
A bignum has a header word followed by a number of words which encode the
integer. The sign part of the bignum tag (`s`) in the header encodes the
sign of the number (s=0 for positive numbers, and s=1 for negative
numbers).

// TODO: Describe bignum encoding. (And arithmetic ?)

NOTE: While bignums resemble binaries in that they both are just "`chunks
of bytes`", bignums are always stored on the heap in their entirety, and
having a heap full of very large bignums means the garbage collector will
need to copy a lot of live data back and forth. It is therefore not such a
clever hack to encode a big chunk of binary data as a bignum even if it can
be done. footnote:[Who would ever do such a thing?]

==== References
A ((reference)) is a "`unique`" term, often used to tag messages in order
to basically implement a channel over a process mailbox. A reference
is implemented as an 82 bit counter. After 9671406556917033397649407
calls to ((`make_ref/0`)), the counter will wrap and start over with ref 0
again. You need a really fast machine to do that many calls to
`make_ref` within your lifetime -- unless you restart the node, in which
case it also will start from 0 again, but then all the old local refs
are gone. If you send the ref to another node it becomes an _external
ref_, see below.

On a 32-bit system a local ref takes up four 32-bit words on the
heap. On a 64-bit system a ref takes up three 64-bit words on the
heap.

.Representation of a ref in a 32-bit (or half-word) system.
----

    |00000000 00000000 00000000 11010000| Arity 3 + ref tag
    |00000000 000000rr rrrrrrrr rrrrrrrr| Data0
    |rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr| Data1
    |rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr| Data2

----

The reference number is `(Data2 bsl 50) + (Data1 bsl 18) + Data0`.

.Outline
****

*TODO*

 The implementation of floats,  ports, pids. Strings as lists, IO lists,
 lists on 64-bit machines. Binaries, sub binaries, and copying. Records.

 Possibly: The half-word machine. Sharing and deep copy. (or this will be in GC)

 Outro/conclusion
****
